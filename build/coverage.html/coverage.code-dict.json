{"/home/travis/build/npmtest/node-npmtest-jasmine-node/test.js":"/* istanbul instrument in package npmtest_jasmine_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/lib.npmtest_jasmine_node.js":"/* istanbul instrument in package npmtest_jasmine_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jasmine_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jasmine_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jasmine-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jasmine_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jasmine_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jasmine_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jasmine_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jasmine_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jasmine_node.__dirname + '/lib.npmtest_jasmine_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/lib/jasmine-node/index.js":"var fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar util;\ntry {\n  util = require('util')\n} catch(e) {\n  util = require('sys')\n}\n\nvar path = require('path');\n\nvar filename = __dirname + '/jasmine-1.3.1.js';\nvar isWindowUndefined = typeof global.window === 'undefined';\nif (isWindowUndefined) {\n  global.window = {\n    setTimeout: setTimeout,\n    clearTimeout: clearTimeout,\n    setInterval: setInterval,\n    clearInterval: clearInterval\n  };\n}\n\nvar src = fs.readFileSync(filename);\n// Put jasmine in the global context, this is somewhat like running in a\n// browser where every file will have access to `jasmine`\nvar jasmine = require('vm').runInThisContext(src + \"\\njasmine;\", filename);\n\n\nif (isWindowUndefined) {\n  delete global.window;\n}\nrequire(\"./async-callback\");\nrequire(\"jasmine-reporters\");\nvar nodeReporters = require('./reporter').jasmineNode;\njasmine.TerminalVerboseReporter = nodeReporters.TerminalVerboseReporter;\njasmine.TerminalReporter = nodeReporters.TerminalReporter;\njasmine.TeamcityReporter = nodeReporters.TeamcityReporter;\njasmine.GrowlReporter = require('jasmine-growl-reporter');\n\n\njasmine.loadHelpersInFolder = function(folder, matcher) {\n  // Check to see if the folder is actually a file, if so, back up to the\n  // parent directory and find some helpers\n  folderStats = fs.statSync(folder);\n  if (folderStats.isFile()) {\n    folder = path.dirname(folder);\n  }\n\n  var helpers = [],\n      helperCollection = require('./spec-collection');\n\n  helperCollection.load([folder], matcher);\n  helpers = helperCollection.getSpecs();\n\n  for (var i = 0, len = helpers.length; i < len; ++i) {\n    var file = helpers[i].path();\n\n    try {\n      var helper = require(file.replace(/\\.*$/, \"\"));\n    } catch (e) {\n      console.log(\"Exception loading helper: \" + file)\n      console.log(e);\n      throw e; // If any of the helpers fail to load, fail everything\n    }\n\n    for (var key in helper) {\n      global[key]= helper[key];\n    }\n  }\n};\n\nfunction removeJasmineFrames(text) {\n  if (!text) {\n    return text;\n  }\n\n  var lines = [];\n  text.split(/\\n/).forEach(function(line){\n    if (line.indexOf(filename) == -1) {\n      lines.push(line);\n    }\n  });\n  return lines.join('\\n');\n}\n\njasmine.executeSpecsInFolder = function(options){\n  var folders =      options['specFolders'];\n  var done   =       options['onComplete'];\n  var isVerbose =    options['isVerbose'];\n  var showColors =   options['showColors'];\n  var teamcity =     options['teamcity'];\n  var useRequireJs = options['useRequireJs'];\n  var matcher =      options['regExpSpec'];\n  var junitreport = options['junitreport'];\n  var includeStackTrace = options['includeStackTrace'];\n  var growl = options['growl'];\n\n  // Overwriting it allows us to handle custom async specs\n  it = function(desc, func, timeout) {\n      return jasmine.getEnv().it(desc, func, timeout);\n  }\n  beforeEach = function(func, timeout) {\n      return jasmine.getEnv().beforeEach(func, timeout);\n  }\n  afterEach = function(func, timeout) {\n      return jasmine.getEnv().afterEach(func, timeout);\n  }\n  var fileMatcher = matcher || new RegExp(\".(js)$\", \"i\"),\n      colors = showColors || false,\n      specs = require('./spec-collection'),\n      jasmineEnv = jasmine.getEnv();\n\n  specs.load(folders, fileMatcher);\n\n  if(junitreport && junitreport.report) {\n    var existsSync = fs.existsSync || path.existsSync;\n    if(!existsSync(junitreport.savePath)) {\n      util.puts('creating junit xml report save path: ' + junitreport.savePath);\n      mkdirp.sync(junitreport.savePath, \"0755\");\n    }\n    jasmineEnv.addReporter(new jasmine.JUnitXmlReporter(junitreport.savePath,\n                                                        junitreport.consolidate,\n                                                        junitreport.useDotNotation));\n  }\n\n  if(teamcity){\n    jasmineEnv.addReporter(new jasmine.TeamcityReporter({onComplete: done}));\n  } else if(isVerbose) {\n    jasmineEnv.addReporter(new jasmine.TerminalVerboseReporter({ print: print,\n                                                         color:       showColors,\n                                                         onComplete:  done,\n                                                         stackFilter: removeJasmineFrames}));\n  } else {\n    jasmineEnv.addReporter(new jasmine.TerminalReporter({print: print,\n                                                color: showColors,\n                                                includeStackTrace: includeStackTrace,\n                                                onComplete:  done,\n                                                stackFilter: removeJasmineFrames}));\n  }\n\n  if (growl) {\n    jasmineEnv.addReporter(new jasmine.GrowlReporter());\n  }\n\n  if (useRequireJs) {\n    require('./requirejs-runner').executeJsRunner(\n      specs,\n      done,\n      jasmineEnv,\n      typeof useRequireJs === 'string' ? useRequireJs : null\n    );\n  } else {\n    var specsList = specs.getSpecs();\n\n    for (var i = 0, len = specsList.length; i < len; ++i) {\n      var filename = specsList[i];\n      delete require.cache[filename.path()];\n      // Catch exceptions in loading the spec\n      try {\n        require(filename.path().replace(/\\.\\w+$/, \"\"));\n      } catch (e) {\n        console.log(\"Exception loading: \" + filename.path());\n        console.log(e);\n        throw e;\n      }\n    }\n\n    jasmineEnv.execute();\n  }\n};\n\nfunction now(){\n  return new Date().getTime();\n}\n\njasmine.asyncSpecWait = function(){\n  var wait = jasmine.asyncSpecWait;\n  wait.start = now();\n  wait.done = false;\n  (function innerWait(){\n    waits(10);\n    runs(function() {\n      if (wait.start + wait.timeout < now()) {\n        expect('timeout waiting for spec').toBeNull();\n      } else if (wait.done) {\n        wait.done = false;\n      } else {\n        innerWait();\n      }\n    });\n  })();\n};\njasmine.asyncSpecWait.timeout = 4 * 1000;\njasmine.asyncSpecDone = function(){\n  jasmine.asyncSpecWait.done = true;\n};\n\nfunction print(str) {\n  process.stdout.write(util.format(str));\n}\n\nfor ( var key in jasmine) {\n  exports[key] = jasmine[key];\n}\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/lib/jasmine-node/async-callback.js":"(function() {\n    var withoutAsync = {};\n\n    [\"it\", \"beforeEach\", \"afterEach\"].forEach(function(jasmineFunction) {\n        withoutAsync[jasmineFunction] = jasmine.Env.prototype[jasmineFunction];\n        return jasmine.Env.prototype[jasmineFunction] = function() {\n            var args = Array.prototype.slice.call(arguments, 0);\n            var timeout = null;\n            if (isLastArgumentATimeout(args)) {\n                timeout = args.pop();\n                // The changes to the jasmine test runner causes undef to be passed when\n                // calling all it()'s now. If the last argument isn't a timeout and the\n                // last argument IS undefined, let's just pop it off. Since out of bounds\n                // items are undefined anyways, *hopefully* removing an undef item won't\n                // hurt.\n            } else if (args[args.length-1] == undefined) {\n                args.pop();\n            }\n            if (isLastArgumentAnAsyncSpecFunction(args))\n            {\n                var specFunction = args.pop();\n                args.push(function() {\n                    return asyncSpec(specFunction, this, timeout);\n                });\n            }\n            return withoutAsync[jasmineFunction].apply(this, args);\n        };\n    });\n\n    function isLastArgumentATimeout(args)\n    {\n        return args.length > 0 && (typeof args[args.length-1]) === \"number\";\n    }\n\n    function isLastArgumentAnAsyncSpecFunction(args)\n    {\n        return args.length > 0 && (typeof args[args.length-1]) === \"function\" && args[args.length-1].length > 0;\n    }\n\n    function asyncSpec(specFunction, spec, timeout) {\n        if (timeout == null) timeout = jasmine.getEnv().defaultTimeoutInterval || 1000;\n        var done = false;\n        spec.runs(function() {\n            try {\n                return specFunction.call(spec, function(error) {\n                    done = true;\n                    if (error != null) return spec.fail(error);\n                });\n            } catch (e) {\n                done = true;\n                throw e;\n            }\n        });\n        return spec.waitsFor(function() {\n            if (done === true) {\n                return true;\n            }\n        }, \"spec to complete\", timeout);\n    };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/lib/jasmine-node/reporter.js":"(function() {\n  //\n  // Imports\n  //\n  var util;\n  try {\n    util = require('util')\n  } catch(e) {\n    util = require('sys')\n  }\n\n  var jasmineNode = {};\n  //\n  // Helpers\n  //\n  function noop() {}\n\n\n  jasmineNode.TerminalReporter = function(config) {\n    this.print_ = config.print || function (str) { process.stdout.write(util.format(str)); };\n    this.color_ = config.color ? this.ANSIColors : this.NoColors;\n\n    this.started_ = false;\n    this.finished_ = false;\n\n    this.callback_ = config.onComplete || false\n\n    this.suites_ = [];\n    this.specResults_ = {};\n    this.failures_ = [];\n    this.includeStackTrace_ = config.includeStackTrace === false ? false : true;\n    this.stackFilter_ = config.stackFilter || function(t) { return t; };\n  }\n\n\n  jasmineNode.TerminalReporter.prototype = {\n    reportRunnerStarting: function(runner) {\n      this.started_ = true;\n      this.startedAt = new Date();\n      var suites = runner.topLevelSuites();\n      for (var i = 0; i < suites.length; i++) {\n        var suite = suites[i];\n        this.suites_.push(this.summarize_(suite));\n      }\n    },\n\n    ANSIColors: {\n        pass:    function() { return '\\033[32m'; }, // Green\n        fail:    function() { return '\\033[31m'; }, // Red\n        specTiming:  function()  { return '\\033[34m'; }, // Blue\n        suiteTiming:  function() { return '\\033[33m'; }, // Yelow\n        ignore:  function() { return '\\033[37m'; }, // Light Gray\n        neutral: function() { return '\\033[0m';  }  // Normal\n    },\n\n    NoColors: {\n        pass:    function() { return ''; },\n        fail:    function() { return ''; },\n        specTiming:  function() { return ''; },\n        suiteTiming: function() { return ''; },\n        ignore:  function() { return ''; },\n        neutral: function() { return ''; }\n    },\n\n    summarize_: function(suiteOrSpec) {\n      var isSuite = suiteOrSpec instanceof jasmine.Suite;\n\n      // We could use a separate object for suite and spec\n      var summary = {\n        id: suiteOrSpec.id,\n        name: suiteOrSpec.description,\n        type: isSuite? 'suite' : 'spec',\n        suiteNestingLevel: 0,\n        children: []\n      };\n\n      if (isSuite) {\n        var calculateNestingLevel = function(examinedSuite) {\n          var nestingLevel = 0;\n          while (examinedSuite.parentSuite !== null) {\n            nestingLevel += 1;\n            examinedSuite = examinedSuite.parentSuite;\n          }\n          return nestingLevel;\n        };\n\n        summary.suiteNestingLevel = calculateNestingLevel(suiteOrSpec);\n\n        var children = suiteOrSpec.children();\n        for (var i = 0; i < children.length; i++) {\n          summary.children.push(this.summarize_(children[i]));\n        }\n      }\n\n      return summary;\n    },\n\n    // This is heavily influenced by Jasmine's Html/Trivial Reporter\n    reportRunnerResults: function(runner) {\n      this.reportFailures_();\n\n      var results = runner.results();\n      var resultColor = (results.failedCount > 0) ? this.color_.fail() : this.color_.pass();\n\n      var specs = runner.specs();\n      var specCount = specs.length;\n\n      var message = \"\\n\\nFinished in \" + ((new Date().getTime() - this.startedAt.getTime()) / 1000) + \" seconds\";\n      this.printLine_(message);\n\n      // This is what jasmine-html.js has\n      //message = \"\" + specCount + \" spec\" + ( specCount === 1 ? \"\" : \"s\" ) + \", \" + results.failedCount + \" failure\" + ((results.failedCount === 1) ? \"\" : \"s\");\n\n      this.printLine_(this.stringWithColor_(this.printRunnerResults_(runner), resultColor));\n\n      this.finished_ = true;\n      if(this.callback_) { this.callback_(runner); }\n    },\n\n    reportFailures_: function() {\n      if (this.failures_.length === 0) {\n        return;\n      }\n\n      var indent = '  ', failure;\n      this.printLine_('\\n');\n\n      this.print_('Failures:');\n\n      for (var i = 0; i < this.failures_.length; i++) {\n        failure = this.failures_[i];\n        this.printLine_('\\n');\n        this.printLine_('  ' + (i + 1) + ') ' + failure.spec);\n        this.printLine_('   Message:');\n        this.printLine_('     ' + this.stringWithColor_(failure.message, this.color_.fail()));\n        if (this.includeStackTrace_) {\n            this.printLine_('   Stacktrace:');\n            this.print_('     ' + this.stackFilter_(failure.stackTrace));\n        }\n      }\n    },\n\n    reportSuiteResults: function(suite) {\n      // Not used in this context\n    },\n\n    reportSpecResults: function(spec) {\n      var result = spec.results();\n      var msg = '';\n      if (result.skipped) {\n        msg = this.stringWithColor_('-', this.color_.ignore());\n      } else if (result.passed()) {\n        msg = this.stringWithColor_('.', this.color_.pass());\n      } else {\n        msg = this.stringWithColor_('F', this.color_.fail());\n        this.addFailureToFailures_(spec);\n      }\n      this.spec_results += msg;\n      this.print_(msg);\n    },\n\n    addFailureToFailures_: function(spec) {\n      var result = spec.results();\n      var failureItem = null;\n\n      var items_length = result.items_.length;\n      for (var i = 0; i < items_length; i++) {\n        if (result.items_[i].passed_ === false) {\n          failureItem = result.items_[i];\n\n          var failure = {\n            spec: spec.suite.getFullName() + \" \" + spec.description,\n            message: failureItem.message,\n            stackTrace: failureItem.trace.stack\n          }\n\n          this.failures_.push(failure);\n        }\n      }\n    },\n\n    printRunnerResults_: function(runner){\n      var results = runner.results();\n      var specs = runner.specs();\n      var msg = '';\n      var skippedCount = 0;\n      specs.forEach(function(spec) {\n        if (spec.results().skipped) {\n          skippedCount++;\n        }\n      });\n      var passedCount = specs.length - skippedCount;\n      msg += passedCount + ' test' + ((passedCount === 1) ? '' : 's') + ', ';\n      msg += results.totalCount + ' assertion' + ((results.totalCount === 1) ? '' : 's') + ', ';\n      msg += results.failedCount + ' failure' + ((results.failedCount === 1) ? '' : 's') + ', ';\n      msg += skippedCount + ' skipped' + '\\n';\n      return msg;\n    },\n\n      // Helper Methods //\n    stringWithColor_: function(stringValue, color) {\n      return (color || this.color_.neutral()) + stringValue + this.color_.neutral();\n    },\n\n    printLine_: function(stringValue) {\n      this.print_(stringValue);\n      this.print_('\\n');\n    }\n  };\n\n  // ***************************************************************\n  // TerminalVerboseReporter uses the TerminalReporter's constructor\n  // ***************************************************************\n  jasmineNode.TerminalVerboseReporter = function(config) {\n    jasmineNode.TerminalReporter.call(this, config);\n    // The extra field in this object\n    this.indent_ = 0;\n    this.specTimes_ = {};\n    this.suiteTimes_ = {};\n    this.suiteResults_ = {};\n  }\n\n\n  jasmineNode.TerminalVerboseReporter.prototype = {\n\n    reportSpecStarting: function(spec) {\n        now = new Date().getTime();\n        this.specTimes_[spec.id] = now;\n        var suite = spec.suite;\n        while (suite) {\n            if (!this.suiteTimes_[suite.id]) {\n                this.suiteTimes_[suite.id] = now;\n            }\n            suite = suite.parentSuite;\n        }\n    },\n\n    reportSpecResults: function(spec) {\n      var elapsed = new Date().getTime() - this.specTimes_[spec.id];\n\n      if (spec.results().failedCount > 0) {\n        this.addFailureToFailures_(spec);\n      }\n\n      this.specResults_[spec.id] = {\n        messages: spec.results().getItems(),\n        result: spec.results().failedCount > 0 ? 'failed' : 'passed',\n        runtime: elapsed\n      };\n    },\n\n    reportSuiteResults: function(suite) {\n        var startTime = this.suiteTimes_[suite.id];\n        if (startTime) {\n            var elapsed = new Date().getTime() - startTime;\n            this.suiteResults_[suite.id] = {\n                runtime: elapsed\n            };\n        }\n    },\n\n    reportRunnerResults: function(runner) {\n      var messages = new Array();\n      this.buildMessagesFromResults_(messages, this.suites_);\n\n      var messages_length = messages.length;\n      for (var i = 0; i < messages_length-1; i++) {\n        this.printLine_(messages[i]);\n      }\n\n      this.print_(messages[messages_length-1]);\n\n      // Call the parent object's method\n      jasmineNode.TerminalReporter.prototype.reportRunnerResults.call(this, runner);\n    },\n\n    buildMessagesFromResults_: function(messages, results, depth) {\n      var element, specResult, specIndentSpaces, msg = '';\n      depth = (depth === undefined) ? 0 : depth;\n\n      var results_length = results.length;\n      for (var i = 0; i < results_length; i++) {\n        element = results[i];\n\n        if (element.type === 'spec') {\n          specResult = this.specResults_[element.id.toString()];\n\n          if (specResult.result === 'passed') {\n            msg = this.stringWithColor_(this.indentMessage_(element.name, depth), this.color_.pass());\n          } else {\n            msg = this.stringWithColor_(this.indentMessage_(element.name, depth), this.color_.fail());\n          }\n          msg += this.stringWithColor_(\" - \" + specResult.runtime + \" ms\",\n                                       this.color_.specTiming());\n\n          messages.push(msg);\n        } else {\n          messages.push('');\n          msg = this.indentMessage_(element.name, depth)\n          if (element.id != null) {\n              suiteResult = this.suiteResults_[element.id.toString()];\n              if (suiteResult) {\n                  msg += this.stringWithColor_(\" - \" + suiteResult.runtime + \" ms\", this.color_.suiteTiming());\n              }\n          }\n          messages.push(msg);\n        }\n\n        this.buildMessagesFromResults_(messages, element.children, depth + 2);\n      }\n    },\n\n    indentMessage_: function(message, indentCount) {\n      var _indent = '';\n      for (var i = 0; i < indentCount; i++) {\n        _indent += '  ';\n      }\n      return (_indent + message);\n    }\n  };\n\n  // Inherit from TerminalReporter\n  jasmineNode.TerminalVerboseReporter.prototype.__proto__ = jasmineNode.TerminalReporter.prototype;\n\n  // Extend Teamcity Reporter\n  jasmineNode.TeamcityReporter = function(config) {\n    var callback_ = config.onComplete || false;\n\n    (function(superFn) {\n      jasmineNode.TeamcityReporter.prototype.reportRunnerResults = function(runner) {\n        superFn.call(this, runner);\n        if (callback_) {callback_(runner)}\n      }\n    }(jasmine.TeamcityReporter.prototype.reportRunnerResults));\n  };\n  jasmineNode.TeamcityReporter.prototype = new jasmine.TeamcityReporter;\n\n  //\n  // Exports\n  //\n  exports.jasmineNode = jasmineNode;\n})();\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/SampleSpecs.js":"describe('jasmine-node', function(){\n\n  it('should pass', function(){\n    expect(1+2).toEqual(3);\n  });\n\n  it('shows asynchronous test', function(){\n    setTimeout(function(){\n      expect('second').toEqual('second');\n      asyncSpecDone();\n    }, 1);\n    expect('first').toEqual('first');\n    asyncSpecWait();\n  });\n\n  it('shows asynchronous test node-style', function(done){\n    setTimeout(function(){\n      expect('second').toEqual('second');\n      // If you call done() with an argument, it will fail the spec \n      // so you can use it as a handler for many async node calls\n      done();\n    }, 1);\n    expect('first').toEqual('first');\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/TestSpec.js":"\ndescribe('jasmine-node-flat', function(){\n  it('should pass', function(){\n    expect(1+2).toEqual(3);\n  });\n});\n\ndescribe('beforeEach Timeout', function(){\n  beforeEach(function(done) {\n      setTimeout(done, 1000);\n  }, 100);\n  it('should fail', function(){\n    expect(1+2).toEqual(3);\n  });\n});\n\ndescribe('afterEach Timeout', function(){\n  afterEach(function(done) {\n      setTimeout(done, 1000);\n  }, 100);\n  it('should pass and then afterEach will fail', function(){\n    expect(1+2).toEqual(3);\n  });\n});\n\ndescribe('Testing some characters', function()  {\n    var chars = ['&', '\\'', '\"', '<', '>'];\n    for(var i = 0; i < chars.length; i+=1)  {\n        currentChar = chars[i];\n        it('should reject ' + currentChar, (function(currentChar)  {\n            expect(false).toEqual(false);\n        })(currentChar));\n    }\n});\n\ndescribe('Testing waitsfor functionality', function() {\n    it(\"Runs and then waitsFor\", function() {\n        runs(function() {\n            1+1;\n        });\n        waitsFor(function() {\n            return true === false;\n        }, \"the impossible\", 1000);\n        runs(function() {\n            expect(true).toBeTruthy();\n        });\n    });\n});\n\ndescribe('root', function () {\n\n  describe('nested', function () {\n\n    xit('nested statement', function () {\n      expect(1).toBeTruthy();\n    });\n\n  });\n\n  it('root statement', function () {\n    expect(1).toBeTruthy();\n  });\n\n});\n\ndescribe(\"Top level describe block\", function() {\n  it(\"first it block in top level describe\", function() {\n    expect(true).toEqual(true);\n  });\n  describe(\"Second level describe block\", function() {\n    it(\"first it block in second level describe\", function() {\n      expect(true).toBe(true);\n    });\n  });\n  it(\"second it block in top level describe\", function() {\n    expect(true).toEqual(true);\n  });\n});\n\ndescribe('async', function () {\n\n    var request = function (str, func) {\n        func('1', '2', 'hello world');\n    };\n\n    it(\"should respond with hello world\", function(done) {\n        request(\"http://localhost:3000/hello\", function(error, response, body){\n            expect(body).toEqual(\"hello world\");\n            done();\n        });\n    });\n\n    it(\"should respond with hello world\", function(done) {\n        request(\"http://localhost:3000/hello\", function(error, response, body){\n            expect(body).toEqual(\"hello world\");\n            done();\n        });\n    }, 250); // timeout after 250 ms\n\n});\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/TimerSpec.js":"describe(\"Manually ticking the Jasmine Mock Clock\", function() {\n  var timerCallback;\n\n  beforeEach(function() {\n    timerCallback = jasmine.createSpy('timerCallback');\n    jasmine.Clock.useMock();\n  });\n\n  it(\"causes a timeout to be called synchronously\", function() {\n    setTimeout(timerCallback, 100);\n\n    expect(timerCallback).not.toHaveBeenCalled();\n\n    jasmine.Clock.tick(101);\n\n    expect(timerCallback).toHaveBeenCalled();\n  });\n\n  it(\"causes an interval to be called synchronously\", function() {\n    setInterval(timerCallback, 100);\n\n    expect(timerCallback).not.toHaveBeenCalled();\n\n    jasmine.Clock.tick(102);\n    expect(timerCallback).toHaveBeenCalled();\n    expect(timerCallback.callCount).toEqual(1);\n\n    jasmine.Clock.tick(50);\n    expect(timerCallback.callCount).toEqual(1);\n\n    jasmine.Clock.tick(50);\n    expect(timerCallback.callCount).toEqual(2);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/async-callback_spec.js":"describe('async-callback', function() {\n  var env;\n  beforeEach(function() {\n    env = new jasmine.Env();\n  });\n\n  describe('it', function() {\n\n    it(\"should time out if callback is not called\", function() {\n      env.describe(\"it\", function() {\n        env.it(\"doesn't wait\", function(done) {\n          expect(1+2).toEqual(3);\n        });\n      });\n\n      env.currentRunner().execute();\n\n      waitsFor(function() {\n        return env.currentRunner().results().totalCount > 0;\n      }, 6000);\n\n      runs(function() {\n        expect(env.currentRunner().results().failedCount).toEqual(1);\n        expect(firstResult(env.currentRunner()).message).toMatch(/timeout/);;\n      });\n    });\n\n    it(\"should accept timeout for individual spec\", function() {\n      env.describe(\"it\", function() {\n        env.it(\"doesn't wait\", function(done) {\n          expect(1+2).toEqual(3);\n        }, 250);\n      });\n\n      env.currentRunner().execute();\n\n      waitsFor(function() {\n        return env.currentRunner().results().totalCount > 0;\n      }, 500);\n\n      runs(function() {\n        expect(env.currentRunner().results().failedCount).toEqual(1);\n        expect(firstResult(env.currentRunner()).message).toMatch(/timeout/);;\n      });\n    });\n\n    it(\"should fail if callback is passed error\", function() {\n       env.describe(\"it\", function() {\n        env.it(\"doesn't wait\", function(done) {\n          process.nextTick(function() {\n            done(\"Failed asynchronously\");\n          });\n        });\n      });\n\n      env.currentRunner().execute();\n\n      waitsFor(function() {\n        return env.currentRunner().results().totalCount > 0;\n      });\n\n      runs(function() {\n        expect(env.currentRunner().results().failedCount).toEqual(1);\n        expect(firstResult(env.currentRunner()).message).toEqual(\"Failed asynchronously\");\n      });\n    });\n\n\n    it(\"should finish after callback is called\", function() {\n      env.describe(\"it\", function() {\n        env.it(\"waits\", function(done) {\n          process.nextTick(function() {\n            env.currentSpec.expect(1+2).toEqual(3);\n            done();\n          });\n        });\n      });\n\n      env.currentRunner().execute();\n\n      waitsFor(function() {\n        return env.currentRunner().results().totalCount > 0;\n      }, 2000);\n\n      runs(function() {\n        expect(env.currentRunner().results().passedCount).toEqual(1);\n      });\n    });\n\n      it('should run in the context of the current spec', function(){\n          var actualContext;\n          var jasmineSpecContext;\n          env.describe(\"it\", function() {\n              env.it(\"register context\", function(done) {\n                  actualContext = this;\n                  jasmineSpecContext = env.currentSpec;\n                  env.expect(this).toBe(jasmineSpecContext);\n                  done();\n              });\n          });\n\n          env.currentRunner().execute();\n\n          waitsFor(function() {\n              return env.currentRunner().results().totalCount > 0;\n          }, 'tested jasmine env runner to run the test', 100);\n\n          runs(function() {\n              expect(actualContext).not.toBe(global);\n              expect(actualContext).toBe(jasmineSpecContext);\n          });\n      });\n\n  });\n\n  describe(\"beforeEach\", function() {\n    it(\"should wait for callback\", function() {\n      env.describe(\"beforeEach\", function() {\n        var waited = false;\n        env.beforeEach(function(done) {\n          process.nextTick(function() {\n            waited = true;\n            done();\n          });\n        });\n        env.it(\"waited\", function() {\n          env.currentSpec.expect(waited).toBeTruthy();\n        });\n      });\n\n      env.currentRunner().execute();\n\n      waitsFor(function() {\n        return env.currentRunner().results().totalCount > 0;\n      });\n\n      runs(function() {\n        expect(env.currentRunner().results().passedCount).toEqual(1);\n      });\n      });\n  });\n\n  describe(\"afterEach\", function() {\n    it(\"should be passed async callback\", function() {\n      var completed = false;\n      env.describe(\"afterEach\", function() {\n        env.afterEach(function(done) {\n          process.nextTick(function() {\n            done('Failed in afterEach');\n            completed = true;\n          });\n        });\n        env.it(\"should pass\", function() {\n          this.expect(1+2).toEqual(3);\n        });\n      });\n\n      env.currentRunner().execute();\n\n      waitsFor(function() {\n        return completed === true;\n      });\n\n      runs(function() {\n        expect(env.currentRunner().results().passedCount).toEqual(1);\n        expect(env.currentRunner().results().failedCount).toEqual(1);\n      });\n    });\n  });\n});\n\nfunction firstResult(runner) {\n  return runner.results().getItems()[0].getItems()[0].getItems()[0];\n}\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/helper_spec.js":"describe(\"helper\", function() {\n  it(\"should load the helpers\", function() {\n    var expectation= expect(true);\n    \n    expect(typeof(expectation.toHaveProperty)).toBe('function');\n  });\n});","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/reporter_spec.js":"var jasmineNode = require(__dirname + \"/../lib/jasmine-node/reporter\").jasmineNode;\n\ndescribe('TerminalReporter', function() {\n  beforeEach(function() {\n    var config = {}\n    this.reporter = new jasmineNode.TerminalReporter(config);\n  });\n\n  describe(\"initialize\", function() {\n    it('initializes print_ from config', function() {\n      var config = { print: true };\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.print_).toBeTruthy();\n    });\n\n    it('initializes color_ from config', function() {\n      var config = { color: true }\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.color_).toEqual(jasmineNode.TerminalReporter.prototype.ANSIColors);\n    });\n\n    it('initializes includeStackTrace_ from config', function () {\n        var config = {}\n        this.reporter = new jasmineNode.TerminalReporter(config);\n        expect(this.reporter.includeStackTrace_).toBeTruthy();\n    });\n\n    it('sets the started_ flag to false', function() {\n      var config = {}\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.started_).toBeFalsy();\n    });\n\n    it('sets the finished_ flag to false', function() {\n      var config = {}\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.finished_).toBeFalsy();\n    });\n\n    it('initializes the suites_ array', function() {\n      var config = {}\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.suites_.length).toEqual(0);\n    });\n\n    it('initializes the specResults_ to an Object', function() {\n      var config = {}\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.specResults_).toBeDefined();\n    });\n\n    it('initializes the failures_ array', function() {\n      var config = {}\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.failures_.length).toEqual(0);\n    });\n\n    it('sets the callback_ property to false by default', function() {\n      var config = {}\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.callback_).toEqual(false)\n    });\n\n    it('sets the callback_ property to onComplete if supplied', function() {\n      var foo = function() { }\n      var config = { onComplete: foo }\n      this.reporter = new jasmineNode.TerminalReporter(config);\n      expect(this.reporter.callback_).toBe(foo)\n    });\n  });\n\n  describe('when the report runner starts', function() {\n    beforeEach(function() {\n      this.spy = spyOn(this.reporter, 'printLine_');\n\n      var runner = {\n        topLevelSuites: function() {\n          var suites = [];\n          var suite = { id: 25 };\n          suites.push(suite);\n          return suites;\n        }\n      };\n      this.reporter.reportRunnerStarting(runner);\n    });\n\n    it('sets the started_ field to true', function() {\n      expect(this.reporter.started_).toBeTruthy();\n    });\n\n    it('sets the startedAt field', function() {\n      // instanceof does not work cross-context (such as when run with requirejs)\n      var ts = Object.prototype.toString;\n      expect(ts.call(this.reporter.startedAt)).toBe(ts.call(new Date()));\n    });\n\n    it('buildes the suites_ collection', function() {\n      expect(this.reporter.suites_.length).toEqual(1);\n      expect(this.reporter.suites_[0].id).toEqual(25);\n    });\n  });\n\n  describe('the summarize_ creates suite and spec tree', function() {\n    beforeEach(function() {\n      this.spec = {\n        id: 1,\n        description: 'the spec',\n        isSuite: false\n      }\n    });\n\n    it('creates a summary object from spec', function() {\n      var result = this.reporter.summarize_(this.spec);\n\n      expect(result.id).toEqual(1);\n      expect(result.name).toEqual('the spec');\n      expect(result.type).toEqual('spec');\n      expect(result.children.length).toEqual(0);\n    });\n\n    it('creates a summary object from suite with 1 spec', function() {\n      var env = { nextSuiteId: false }\n      var suite = new jasmine.Suite(env, 'suite name', undefined, undefined);\n      suite.description = 'the suite';\n      suite.parentSuite = null;\n      suite.children_.push(this.spec);\n\n      var result = this.reporter.summarize_(suite);\n      expect(result.name).toEqual('the suite');\n      expect(result.type).toEqual('suite');\n      expect(result.children.length).toEqual(1);\n\n      var suiteChildSpec = result.children[0];\n      expect(suiteChildSpec.id).toEqual(1);\n    });\n  });\n\n  describe('reportRunnerResults', function() {\n    beforeEach(function() {\n      this.printLineSpy = spyOn(this.reporter, 'printLine_');\n    });\n\n    it('generates the report', function() {\n      var failuresSpy = spyOn(this.reporter, 'reportFailures_');\n      var printRunnerResultsSpy = spyOn(this.reporter, 'printRunnerResults_').\n                          andReturn('this is the runner result');\n\n      var callbackSpy = spyOn(this.reporter, 'callback_');\n\n      var runner = {\n        results: function() {\n          var result = { failedCount: 0 };\n          return result;\n        },\n        specs: function() { return []; }\n      };\n      this.reporter.startedAt = new Date();\n\n      this.reporter.reportRunnerResults(runner);\n\n      expect(failuresSpy).toHaveBeenCalled();\n      expect(this.printLineSpy).toHaveBeenCalled();\n      expect(callbackSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('reportSpecResults', function() {\n    beforeEach(function() {\n      this.printSpy = spyOn(this.reporter, 'print_');\n      this.spec = {\n        id: 1,\n        description: 'the spec',\n        isSuite: false,\n        results: function() {\n          var result = {\n            passed: function() { return true; }\n          }\n          return result;\n        }\n      }\n    });\n\n    it('prints a \\'.\\' for pass', function() {\n      this.reporter.reportSpecResults(this.spec);\n      expect(this.printSpy).toHaveBeenCalledWith('.');\n    });\n\n    it('prints an \\'F\\' for failure', function() {\n      var addFailureToFailuresSpy = spyOn(this.reporter, 'addFailureToFailures_');\n      var results = function() {\n        var result = {\n          passed: function() { return false; }\n        }\n        return result;\n      }\n      this.spec.results = results;\n\n      this.reporter.reportSpecResults(this.spec);\n\n      expect(this.printSpy).toHaveBeenCalledWith('F');\n      expect(addFailureToFailuresSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('addFailureToFailures', function() {\n    it('adds message and stackTrace to failures_', function() {\n      var spec = {\n        suite: {\n          getFullName: function() { return 'Suite name' }\n        },\n        description: 'the spec',\n        results: function() {\n          var result = {\n            items_: function() {\n              var theItems = new Array();\n              var item = {\n                passed_: false,\n                message: 'the message',\n                trace: {\n                  stack: 'the stack'\n                }\n              }\n              theItems.push(item);\n              return theItems;\n            }.call()\n          };\n          return result;\n        }\n      };\n\n      this.reporter.addFailureToFailures_(spec);\n\n      var failures = this.reporter.failures_;\n      expect(failures.length).toEqual(1);\n      var failure = failures[0];\n      expect(failure.spec).toEqual('Suite name the spec');\n      expect(failure.message).toEqual('the message');\n      expect(failure.stackTrace).toEqual('the stack');\n    });\n  });\n\n  describe('prints the runner results', function() {\n    beforeEach(function() {\n      this.runner = {\n        results: function() {\n          var _results = {\n            totalCount: 23,\n            failedCount: 52\n          };\n          return _results;\n        },\n        specs: function() {\n          var _specs = new Array();\n          spec = {\n            results: function() {\n              var _results = {\n                skipped: false\n              }\n              return _results;\n            }\n          };\n          _specs.push(spec);\n          return _specs;\n        }\n      };\n    });\n\n    it('uses the specs\\'s length, totalCount and failedCount', function() {\n      var message = this.reporter.printRunnerResults_(this.runner);\n      expect(message).toEqual('1 test, 23 assertions, 52 failures, 0 skipped\\n');\n    });\n  });\n\n  describe('reports failures', function() {\n    beforeEach(function() {\n      this.printSpy = spyOn(this.reporter, 'print_');\n      this.printLineSpy = spyOn(this.reporter, 'printLine_');\n    });\n\n    it('does not report anything when there are no failures', function() {\n      this.reporter.failures_ = new Array();\n\n      this.reporter.reportFailures_();\n\n      expect(this.printLineSpy).not.toHaveBeenCalled();\n    });\n\n    it('prints the failures', function() {\n      var failure = {\n        spec: 'the spec',\n        message: 'the message',\n        stackTrace: 'the stackTrace'\n      }\n\n      this.reporter.failures_ = new Array();\n      this.reporter.failures_.push(failure);\n\n      this.reporter.reportFailures_();\n\n      var generatedOutput =\n                 [ [ '\\n' ],\n                 [ '\\n' ],\n                 [ '  1) the spec' ],\n                 [ '   Message:' ],\n                 [ '     the message' ],\n                 [ '   Stacktrace:' ] ];\n\n      expect(this.printLineSpy).toHaveBeenCalled();\n      expect(this.printLineSpy.argsForCall).toEqual(generatedOutput);\n\n      expect(this.printSpy).toHaveBeenCalled();\n      expect(this.printSpy.argsForCall[0]).toEqual(['Failures:']);\n      expect(this.printSpy.argsForCall[1]).toEqual(['     the stackTrace']);\n    });\n\n    it('prints the failures without a Stacktrace', function () {\n        var config = { includeStackTrace: false };\n        this.reporter = new jasmineNode.TerminalReporter(config);\n        this.printSpy = spyOn(this.reporter, 'print_');\n        this.printLineSpy = spyOn(this.reporter, 'printLine_');\n\n        var failure = {\n            spec: 'the spec',\n            message: 'the message',\n            stackTrace: 'the stackTrace'\n        }\n\n        this.reporter.failures_ = new Array();\n        this.reporter.failures_.push(failure);\n\n        this.reporter.reportFailures_();\n\n        var generatedOutput =\n                 [ [ '\\n' ],\n                 [ '\\n' ],\n                 [ '  1) the spec' ],\n                 [ '   Message:' ],\n                 [ '     the message' ] ];\n\n        expect(this.printLineSpy).toHaveBeenCalled();\n        expect(this.printLineSpy.argsForCall).toEqual(generatedOutput);\n\n        expect(this.printSpy).toHaveBeenCalled();\n        expect(this.printSpy.argsForCall[0]).toEqual(['Failures:']);\n        expect(this.printSpy.argsForCall[1]).toBeUndefined();\n    });\n  });\n});\n\ndescribe('TerminalVerboseReporter', function() {\n  beforeEach(function() {\n    var config = {}\n    this.verboseReporter = new jasmineNode.TerminalVerboseReporter(config);\n    this.addFailureToFailuresSpy = spyOn(this.verboseReporter, 'addFailureToFailures_');\n    this.spec = {\n      id: 23,\n      results: function() {\n        return {\n          failedCount: 1,\n          getItems: function() {\n            return [\"this is the message\"];\n          }\n        }\n      }\n    };\n  });\n\n  describe('#reportSpecResults', function() {\n    it('adds the spec to the failures_', function() {\n      this.verboseReporter.reportSpecResults(this.spec);\n\n      expect(this.addFailureToFailuresSpy).toHaveBeenCalledWith(this.spec);\n    });\n\n    it('adds a new object to the specResults_', function() {\n      this.verboseReporter.reportSpecResults(this.spec);\n\n      expect(this.verboseReporter.specResults_[23].messages).toEqual(['this is the message']);\n      expect(this.verboseReporter.specResults_[23].result).toEqual('failed');\n    });\n  });\n\n  describe('#buildMessagesFromResults_', function() {\n    beforeEach(function() {\n      this.suite = {\n        id: 17,\n        type: 'suite',\n        name: 'a describe block',\n        suiteNestingLevel: 0,\n        children: [],\n        getFullName: function() { return \"A spec\"; },\n      };\n\n      this.spec = {\n        id: 23,\n        type: 'spec',\n        name: 'a spec block',\n        children: []\n      };\n\n      this.verboseReporter.specResults_['23'] = {\n        result: 'passed',\n        runtime: 200\n      };\n\n      this.verboseReporter.suiteResults_['17'] = {\n        runtime: 500\n      };\n\n    });\n\n    it('does not build anything when the results collection is empty', function() {\n      var results = [],\n          messages = [];\n\n      this.verboseReporter.buildMessagesFromResults_(messages, results);\n\n      expect(messages.length).toEqual(0);\n    });\n\n    it('adds a single suite to the messages', function() {\n      var results = [],\n          messages = [];\n\n      results.push(this.suite);\n\n      this.verboseReporter.buildMessagesFromResults_(messages, results);\n\n      expect(messages.length).toEqual(2);\n      expect(messages[0]).toEqual('');\n      expect(messages[1]).toEqual('a describe block - 500 ms');\n    });\n\n    it('adds a single spec with success to the messages', function() {\n      var results = [],\n          messages = [];\n\n      this.passSpy = spyOn(this.verboseReporter.color_, 'pass');\n\n      results.push(this.spec);\n\n      this.verboseReporter.buildMessagesFromResults_(messages, results);\n\n      expect(this.passSpy).toHaveBeenCalled();\n      expect(messages.length).toEqual(1);\n      expect(messages[0]).toEqual('a spec block - 200 ms');\n    });\n\n    it('adds a single spec with failure to the messages', function() {\n      var results = [],\n          messages = [];\n\n      this.verboseReporter.specResults_['23'].result = 'failed';\n\n      this.passSpy = spyOn(this.verboseReporter.color_, 'pass');\n      this.failSpy = spyOn(this.verboseReporter.color_, 'fail');\n\n      results.push(this.spec);\n\n      this.verboseReporter.buildMessagesFromResults_(messages, results);\n\n      expect(this.failSpy).toHaveBeenCalled();\n      expect(this.passSpy).not.toHaveBeenCalled();\n    });\n\n    it('adds a suite, a suite and a single spec with success to the messages', function() {\n      var results = [],\n          messages = [];\n\n      var subSuite = new Object();\n      subSuite.id = '29';\n      subSuite.type = 'suite';\n      subSuite.name = 'a sub describe block';\n      subSuite.suiteNestingLevel = 1;\n      subSuite.children = [];\n      subSuite.children.push(this.spec);\n\n      this.suite.children.push(subSuite);\n      results.push(this.suite);\n\n      this.verboseReporter.suiteResults_['29'] = {\n        runtime: 350\n      };\n\n      this.verboseReporter.buildMessagesFromResults_(messages, results);\n\n      expect(messages.length).toEqual(5);\n      expect(messages[0]).toEqual('');\n      expect(messages[1]).toEqual('a describe block - 500 ms');\n      expect(messages[2]).toEqual('');\n      expect(messages[3]).toEqual('    a sub describe block - 350 ms');\n      expect(messages[4]).toEqual('        a spec block - 200 ms');\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec/sample_helper.js":"(function(){\n\n  var objectToString = Object.prototype.toString;\n  var PRIMITIVE_TYPES = [String, Number, RegExp, Boolean, Date];\n\n  jasmine.Matchers.prototype.toHaveProperty = function(prop) {\n      try {\n        return prop in this.actual;\n      }\n      catch (e) {\n        return false;\n      }\n  }\n\n})();\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec-requirejs/requirejs-setup.js":"/** Custom RequireJS setup file to test user-specified setup files */\n\n/* We want to minimize behavior changes between this test setup file and the\n * default setup file to avoid breaking tests which rely on any (current or\n * future) default behavior.  So we:\n * - Run the normal setup file\n * - Avoid introducing additional global variables\n * - Avoid maintaining two copies of the setup file\n */\neval(require('fs').readFileSync(baseUrl + '../lib/jasmine-node/requirejs-wrapper-template.js', 'utf8'));\n\n// This is our indicator that this custom setup script has run\nvar setupHasRun = true;\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec-requirejs/requirejs-wrapper-template.js":"/* Setup file run before spec files to setup the context (and RequireJS\n * specifically) to execute the spec file.\n *\n * Defined by caller:\n * - Jasmine predefines\n * - require (Node require)\n * - __dirname, __filename\n * - baseUrl (Relative path to the directory containing this file)\n * - csPath (Path to require-cs module)\n *\n * See requirejs-runner source for full invocation details.\n */\nvar define,\n    requirejsOrig = require('requirejs'),\n    ostring = Object.prototype.toString,\n    path = require('path'),\n    isArray = function(it){\n      return ostring.call(it) === '[object Array]';\n    },\n    isFunction = function(it){\n      return ostring.call(it) === '[object Function]';\n    },\n    requirejs = function(deps, callback){\n      var retVal;\n\n      if(!isArray(deps) && typeof deps !== 'string'){\n        if(isArray(callback)){\n          retVal = requirejsOrig(deps, callback, arguments[2]);\n        } else {\n          retVal = requirejsOrig(deps, [], callback);\n        }\n      } else {\n        retVal = requirejsOrig(deps, callback);\n      }\n\n      return retVal;\n    };\n\nrequirejsOrig.config({\n baseUrl: baseUrl,\n nodeRequire: require,\n paths: {\n  cs: csPath\n }\n});\n\nfor(var key in requirejsOrig) {\n  requirejs[key] = requirejsOrig[key];\n}\n\nrequirejs.config = function(config){\n  var alteredConfig = {};\n\n  for(var key in config) {\n    alteredConfig[key] = config[key];\n  }\n\n  if(alteredConfig.baseUrl){\n    var base = baseUrl.replace(/\\\\/g, '/'),\n        splitUrl = alteredConfig.baseUrl.replace(/\\\\/g, '/').split('/'),\n        index = 0;\n\n    for(; index < splitUrl.length; index++){\n      if(splitUrl[index] === '..'){\n        base = path.dirname(base);\n      } else {\n        base += '/' + splitUrl[index];\n      }\n    }\n\n    alteredConfig.baseUrl = base;\n  }\n\n  return requirejsOrig.config(alteredConfig);\n};\n\nrequire = requirejs;\ndefine = requirejs.define;\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec-requirejs/requirejs.spec.js":"require(['requirejs.sut'], function(sut){\n  describe('RequireJs basic tests', function(){\n    beforeEach(function(){\n        expect(true).toBeTruthy();\n    });\n    afterEach(function(){\n        expect(true).toBeTruthy();\n    });\n    \n    it('should load sut', function(){\n      expect(sut.name).toBe('Subject To Test');\n      expect(sut.method(2)).toBe(3);\n    });\n\n    it('should run setup', function(){\n      expect(typeof setupHasRun).toBe('boolean');\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec-requirejs/requirejs.sut.js":"define(function(){\n  return {\n    name: 'Subject To Test',\n    method: function(input){\n      return 1+input;\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-jasmine-node/node_modules/jasmine-node/spec-requirejs-coffee/requirejs-setup.js":"/** Custom RequireJS setup file to test user-specified setup files */\n\n/* We want to minimize behavior changes between this test setup file and the\n * default setup file to avoid breaking tests which rely on any (current or\n * future) default behavior.  So we:\n * - Run the normal setup file\n * - Avoid introducing additional global variables\n * - Avoid maintaining two copies of the setup file\n */\neval(require('fs').readFileSync(baseUrl + '../lib/jasmine-node/requirejs-wrapper-template.js', 'utf8'));\n\n// This is our indicator that this custom setup script has run\nvar setupHasRun = true;\n"}